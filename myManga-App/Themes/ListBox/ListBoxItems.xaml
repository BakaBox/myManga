<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:converters="clr-namespace:myManga_App.Converters"
    xmlns:Controls="clr-namespace:System.Windows.Controls"
    xmlns:objects="clr-namespace:myMangaSiteExtension.Objects;assembly=myMangaSiteExtension"
    xmlns:utils="clr-namespace:myMangaSiteExtension.Utilities;assembly=myMangaSiteExtension">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/myManga;component/Themes/CoreResourceDictionary.xaml"/>
        <ResourceDictionary Source="/myManga;component/Themes/ProgressBar/ProgressBar.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <converters:ObjectIsLocal x:Key="ObjectIsLocal"/>
    <converters:EqualsConverter x:Key="EqualsConverter"/>

    <converters:StringListToCSV x:Key="StringListToCSV"/>
    <converters:LocationListToCSV x:Key="LocationListToCSV"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="BorderBrush" Value="{DynamicResource window-theme-primary}"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Foreground" Value="{DynamicResource window-foreground}"/>
        <Setter Property="Background" Value="{DynamicResource window-background}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource text-dark}"/>
        <Setter Property="MinHeight" Value="32"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
                        x:Name="ItemBorder"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        Padding="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}">
                        <Grid>
                            <ContentPresenter
                                x:Name="Content"
                                Margin="{TemplateBinding Padding}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Grid x:Name="TRCornerTick" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="Collapsed">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Rectangle Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                <Rectangle Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Grid.Row="1" Grid.Column="1"/>
                                <Rectangle 
                                Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}" 
                                Grid.RowSpan="2" 
                                Grid.ColumnSpan="2">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="1,0">
                                            <GradientStop Color="{DynamicResource window-theme-primary-color}" Offset="0.5"/>
                                            <GradientStop Offset="0.5"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <TextBlock
                                    Text="{DynamicResource oi-check}"
                                    FontFamily="{DynamicResource OpenIconic}" 
                                    FontSize="14" 
                                    Foreground="{DynamicResource window-background}" 
                                    Grid.Column="1"
                                    Margin="-1,0,0,-1"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ItemBorder" Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="ItemBorder" Property="Padding" Value="0"/>
                            <Setter TargetName="TRCornerTick" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="ItemBorder" Property="TextElement.Foreground" Value="{DynamicResource window-theme-primary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}" x:Key="SettingsView_SiteExtensionInformationObjectListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <converters:CommandParameterStringFormat x:Key="CommandParameterStringFormat"/>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="ItemBorder"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        Padding="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}">
                        <Grid
                            x:Name="Content"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            TextBlock.TextAlignment="Left">
                            <StackPanel Orientation="Horizontal">
                                <Controls:MetroToggleButton 
                                    x:Name="EnabledButton"
                                    Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                                    Content="{DynamicResource oi-x}"
                                    FontFamily="{DynamicResource OpenIconic}"
                                    IsChecked="{Binding Enabled, Mode=TwoWay}"/>
                                <TextBlock Text="{Binding Name}" FontSize="16" VerticalAlignment="Center" Margin="5,0,0,0"/>
                            </StackPanel>
                            <!-- Start -->
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                <Controls:MetroButton
                                    x:Name="UpArrow"
                                    Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
									FontFamily="{DynamicResource OpenIconic}" 
									Content="{DynamicResource oi-arrow-thick-top}"
									Command="{Binding DataContext.MoveUpCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
									CommandParameter="{Binding Name, ConverterParameter=Site:\{0\}, Converter={StaticResource CommandParameterStringFormat}}"/>
                                <Controls:MetroButton
                                    x:Name="DownArrow"
                                    Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
									FontFamily="{DynamicResource OpenIconic}" 
									Content="{DynamicResource oi-arrow-thick-bottom}"
									Command="{Binding DataContext.MoveDownCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
									CommandParameter="{Binding Name, ConverterParameter=Site:\{0\}, Converter={StaticResource CommandParameterStringFormat}}"/>
                            </StackPanel>
                            <!-- End -->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Enabled}" Value="True">
                            <Setter TargetName="EnabledButton" Property="Content" Value="{DynamicResource oi-check}"/>
                        </DataTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ItemBorder" Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            <Setter TargetName="ItemBorder" Property="Padding" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="EnabledButton" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="UpArrow" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="DownArrow" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="ItemBorder" Property="TextElement.Foreground" Value="{DynamicResource window-theme-primary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}" x:Key="SettingsView_DatabaseExtensionInformationObjectListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <converters:CommandParameterStringFormat x:Key="CommandParameterStringFormat"/>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="ItemBorder"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        Padding="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}">
                        <Grid
                            x:Name="Content"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            TextBlock.TextAlignment="Left">
                            <StackPanel Orientation="Horizontal">
                                <Controls:MetroToggleButton 
                                    x:Name="EnabledButton"
                                    Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                                    Content="{DynamicResource oi-x}"
                                    FontFamily="{DynamicResource OpenIconic}"
                                    IsChecked="{Binding Enabled, Mode=TwoWay}"/>
                                <TextBlock Text="{Binding Name}" FontSize="16" VerticalAlignment="Center" Margin="5,0,0,0"/>
                            </StackPanel>
                            <!-- Start -->
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                <Controls:MetroButton
                                    x:Name="UpArrow"
                                    Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
									FontFamily="{DynamicResource OpenIconic}" 
									Content="{DynamicResource oi-arrow-thick-top}"
									Command="{Binding DataContext.MoveUpCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
									CommandParameter="{Binding Name, ConverterParameter=Database:\{0\}, Converter={StaticResource CommandParameterStringFormat}}"/>
                                <Controls:MetroButton
                                    x:Name="DownArrow"
                                    Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
									FontFamily="{DynamicResource OpenIconic}" 
									Content="{DynamicResource oi-arrow-thick-bottom}"
									Command="{Binding DataContext.MoveDownCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
									CommandParameter="{Binding Name, ConverterParameter=Database:\{0\}, Converter={StaticResource CommandParameterStringFormat}}"/>
                            </StackPanel>
                            <!-- End -->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Enabled}" Value="True">
                            <Setter TargetName="EnabledButton" Property="Content" Value="{DynamicResource oi-check}"/>
                        </DataTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ItemBorder" Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            <Setter TargetName="ItemBorder" Property="Padding" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="EnabledButton" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="UpArrow" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="DownArrow" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource window-theme-secondary}"/>
                            <Setter TargetName="ItemBorder" Property="TextElement.Foreground" Value="{DynamicResource window-theme-primary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>